!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);function s({timing:t,draw:e,duration:i,onDone:s}){const r=performance.now();requestAnimationFrame(function a(n){let o=((r>n?r:n)-r)/i;o>1&&(o=1);const h=t(o);if(e(h),o<1)return requestAnimationFrame(a);"function"==typeof s&&s()})}function r({fps:t,draw:e,until:i,onDone:s}){let r=performance.now();const a=1e3/(t||1e3);requestAnimationFrame(function t(n){return r+a>n?requestAnimationFrame(t):(r=n,e(),i.done?void("function"==typeof s&&s()):requestAnimationFrame(t))})}function a(t,e){return t/100*e}var n,o;!function(t){t.dot="#82d5ee",t.pick="#4eaaee",t.text="#333",t.white="#fff",t.red="#f00"}(n||(n={}));class h{constructor(t){this.canvas=t}drawDot(t,e,i,s=n.dot){const{ctx:r}=this.canvas;r.beginPath(),r.arc(t,e,i,0,h.fullAngle),r.fillStyle=s,r.fill()}drawText(t,e,i,s="30px Arial",r=n.text,o=n.white){const{ctx:h}=this.canvas;if(null!==o){const r=h.measureText(i).width,n=parseInt(s,10),c=Math.floor(a(n,20)),d=r+2*c,u=n+2*c,l=t-c,p=e-c;this.drawRect(l,p,d,u,o)}h.font=s,h.textBaseline="top",h.fillStyle=r,h.fillText(i,t,e)}drawRect(t,e,i,s,r=n.dot,o){const{ctx:h}=this.canvas;h.beginPath(),this.saveRestoreCtx(()=>{this.rotate(o,{x:t+a(i,50),y:e+a(s,50)}),h.rect(t,e,i,s),h.fillStyle=r,h.fill()})}drawImage(t,e,i,s,r,o=n.white,h){const{ctx:c}=this.canvas;c.beginPath(),this.saveRestoreCtx(()=>{this.rotate(h,{x:t+a(s,50),y:e+a(r,50)}),null!==o&&this.drawRect(t,e,s,r,o),c.drawImage(i,t,e,s,r)})}saveRestoreCtx(t){const{ctx:e}=this.canvas;e.save(),t(),e.restore()}rotate(t,e){if(t&&0!==t){const{x:i,y:s}=e;this.canvas.ctx.translate(i,s);const r=t*h.radienMulti;this.canvas.ctx.rotate(r),this.canvas.ctx.translate(-i,-s)}}}h.fullAngle=2*Math.PI,h.radienMulti=Math.PI/180,function(t){t.linear=(t=>t),t.easeInQuad=(t=>t*t),t.easeOutQuad=(t=>t*(2-t)),t.easeInOutQuad=(t=>t<.5?2*t*t:(4-2*t)*t-1),t.easeInCubic=(t=>t*t*t),t.easeOutCubic=(t=>--t*t*t+1),t.easeInOutCubic=(t=>t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1),t.easeInQuart=(t=>t*t*t*t),t.easeOutQuart=(t=>1- --t*t*t*t),t.easeInOutQuart=(t=>t<.5?8*t*t*t*t:1-8*--t*t*t*t),t.easeInQuint=(t=>t*t*t*t*t),t.easeOutQuint=(t=>1+--t*t*t*t*t),t.easeInOutQuint=(t=>t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t)}(o||(o={}));var c=o.easeInOutQuint,d=o.linear;class u{constructor(t,e,i=[]){this.shapeDrawer=t,this.pathCords=e,this.years=i,this.delayRatio=150,this.pickCords=[]}get partsAmount(){return this.years.length<2?2:this.years.length}get dotsSkipped(){return Math.floor(this.pathCords.length/this.partsAmount)}drawPicks(){for(let t=0;t<this.years.length;t++){const e=this.computeCords(t);this.pickCords.push(e),this.drawPickWithDelay(e,this.delayRatio*t)}return this.pickCords}drawPickWithDelay(t,e=0){setTimeout(()=>this.drawPick(t),e)}drawPick({y:t,x:e,year:i}){s({draw:i=>this.shapeDrawer.drawDot(e,t,20*i,n.pick),duration:800,timing:c,onDone:()=>this.drawYear(e,t,i)})}drawYear(t,e,i){s({timing:d,duration:100,draw:s=>this.shapeDrawer.drawText(t-35,e+50,`${i}`,`${30*s}px Arial`,n.text,n.white)})}computeCords(t){const e=this.pathCords[(t+1)*this.dotsSkipped];return e.year=this.years[t],e}}const l=1;class p{constructor(t,e,i,s){this.shaper=t,this.pathCords=e,this.pickCords=i,this.canvas=s,this.currentPeak=-1,this.image=new Image,this.width=120,this.height=60,this.xOffset=.8*this.width,this.yOffset=this.height+30,this.rotate=0,this.rotateInaccuracy=33,this.currDotCord=this.pathCords[20],this.rotate=this.computeAngle(this.currDotCord,this.pathCords[21]),document.all.next.addEventListener("click",()=>{this.moveToPeak(this.currentPeak+1)}),document.all.prev.addEventListener("click",()=>{this.moveToPeak(this.currentPeak-1)}),window.addEventListener("keydown",t=>37===t.keyCode?this.prevCord():39===t.keyCode?this.nextCord():void 0)}get cords(){const t=this.currDotCord;return{y:t.y-this.yOffset-(this.rotate+this.rotateInaccuracy)/3,x:t.x-this.xOffset+this.rotate/2+this.rotateInaccuracy}}downloadImage(){return new Promise(t=>{this.image.onload=(()=>{t(this),this.image.onload=null}),this.image.src="./ship.png"})}appearance(){this.move(),this.moveToPeak(0)}moveToPeak(t){const e=this.pickCords[t];if(!e)return console.warn(`no pick with index {${t}}`);const i=this.currentPeak<t,s={done:!1};r({until:s,fps:50,draw:()=>{if(s.done=this.currDotCord===e,!s.done){if(i)return this.nextCord();this.prevCord()}},onDone:()=>{this.currentPeak=t}})}nextCord(){this.clean();const t=this.pathCords.findIndex(t=>t===this.currDotCord),e=this.pathCords[t+1];this.rotate=this.computeAngle(this.currDotCord,e),this.currDotCord=e,this.move()}prevCord(){this.clean();const t=this.pathCords.findIndex(t=>t===this.currDotCord),e=this.pathCords[t-1];this.rotate=this.computeAngle(this.currDotCord,e),this.currDotCord=e,this.move()}computeAngle(t,e){const{cathetY:i,cathetX:s,rotateDirection:r}=this.computeTrangleAndDirection(t,e),a=i/Math.sqrt(Math.pow(s,2)+Math.pow(i,2)),n=Math.asin(a)*r;return-Math.ceil(n/h.radienMulti)}computeTrangleAndDirection(t,e){const i=t.x-e.x,s=t.y-e.y;return{cathetX:Math.abs(i),cathetY:Math.abs(s),rotateDirection:i<0&&s>0||i>0&&s<0?1:-1}}move(){this.shaper.drawImage(this.cords.x,this.cords.y,this.image,this.width,this.height,null,this.rotate)}clean(){this.shaper.drawRect(this.cords.x-l,this.cords.y-l,this.width+2*l,this.height+2*l,n.white,this.rotate)}}const f=[2003,2004,2005,2006,2007,2008,2009,2010],m=new class{constructor(t){this.canvasElem=t,this.canvasElem.height=900,this.canvasElem.width=2500,this.ctx=this.canvasElem.getContext("2d"),this.ctx.mozImageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.msImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1}get height(){return this.canvasElem.height}get width(){return this.canvasElem.width}}(document.all.canvas),w=new h(m);new class{constructor(t,e){this.canvas=t,this.shapeDrawer=e,this.xRatio=0,this.yRatio=1,this.sinRatio=70,this.yRatioMultiplier=4.2,this.xRatioMultiplier=142,this.xOffset=-120,this.lineCords=[]}drawPath(){return new Promise(t=>{const e={done:!1};r({draw:()=>{const i=this.computeNextCords();this.lineCords.push(i);const{x:s,y:r}=i;this.drawDot(s,r),e.done=s>=this.canvas.width,e.done&&t(this)},until:e})})}drawDot(t,e){this.shapeDrawer.drawDot(t,e,2),this.xRatio+=.1}computeNextCords(){return{y:this.canvas.height+this.sinRatio*Math.sin(this.xRatio)+--this.yRatio*this.yRatioMultiplier,x:this.xRatio*this.xRatioMultiplier+this.xOffset}}}(m,w).drawPath().then(({lineCords:t})=>{const e=new u(w,t.slice(20,t.length-10),f).drawPicks();return new p(w,t,e,m).downloadImage()}).then(t=>{setTimeout(()=>{t.appearance()},700)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,