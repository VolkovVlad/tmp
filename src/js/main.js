!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);function i({timing:t,draw:e,duration:s,onDone:i}){const r=performance.now();requestAnimationFrame(function a(o){let n=((r>o?r:o)-r)/s;n>1&&(n=1);const h=t(n);if(e(h),n<1)return requestAnimationFrame(a);"function"==typeof i&&i()})}function r(t,e){return t/100*e}var a,o;!function(t){t.dot="#82d5ee",t.pick="#4eaaee",t.text="#333",t.white="#fff",t.red="#f00"}(a||(a={}));class n{constructor(t){this.canvas=t}drawDot(t,e,s,i=a.dot){const{ctx:r}=this.canvas;r.beginPath(),r.arc(t,e,s,0,n.fullAngle),r.fillStyle=i,r.fill()}drawText(t,e,s,i="30px Arial",o=a.text,n=a.white){const{ctx:h}=this.canvas;if(null!==n){const a=h.measureText(s).width,o=parseInt(i,10),c=Math.floor(r(o,20)),d=a+2*c,l=o+2*c,u=t-c,p=e-c;this.drawRect(u,p,d,l,n)}h.font=i,h.textBaseline="top",h.fillStyle=o,h.fillText(s,t,e)}drawRect(t,e,s,i,o=a.dot,n){const{ctx:h}=this.canvas;h.beginPath(),this.saveRestoreCtx(()=>{this.rotate(n,{x:t+r(s,50),y:e+r(i,50)}),h.rect(t,e,s,i),h.fillStyle=o,h.fill()})}rotate(t,e){if(t&&0!==t){const{x:s,y:i}=e;this.canvas.ctx.translate(s,i);const r=t*n.radienMulti;this.canvas.ctx.rotate(r),this.canvas.ctx.translate(-s,-i)}}drawImage(t,e,s,i,o,n=a.white,h){const{ctx:c}=this.canvas;c.beginPath(),this.saveRestoreCtx(()=>{this.rotate(h,{x:t+r(i,50),y:e+r(o,50)}),null!==n&&this.drawRect(t,e,i,o,n),c.drawImage(s,t,e,i,o)})}saveRestoreCtx(t){const{ctx:e}=this.canvas;e.save(),t(),e.restore()}}n.fullAngle=2*Math.PI,n.radienMulti=Math.PI/180,function(t){t.linear=(t=>t),t.easeInQuad=(t=>t*t),t.easeOutQuad=(t=>t*(2-t)),t.easeInOutQuad=(t=>t<.5?2*t*t:(4-2*t)*t-1),t.easeInCubic=(t=>t*t*t),t.easeOutCubic=(t=>--t*t*t+1),t.easeInOutCubic=(t=>t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1),t.easeInQuart=(t=>t*t*t*t),t.easeOutQuart=(t=>1- --t*t*t*t),t.easeInOutQuart=(t=>t<.5?8*t*t*t*t:1-8*--t*t*t*t),t.easeInQuint=(t=>t*t*t*t*t),t.easeOutQuint=(t=>1+--t*t*t*t*t),t.easeInOutQuint=(t=>t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t)}(o||(o={}));var h=o.easeInOutQuint,c=o.linear;class d{constructor(t,e,s=[]){this.shapeDrawer=t,this.pathCords=e,this.years=s,this.delayRatio=150,this.pickCords=[]}get partsAmount(){return this.years.length<2?2:this.years.length}get dotsSkipped(){return Math.floor(this.pathCords.length/this.partsAmount)}drawPicks(){for(let t=0;t<this.years.length;t++){const e=this.computeCords(t);this.pickCords.push(e),this.drawPickWithDelay(e,this.delayRatio*t)}return this.pickCords}drawPickWithDelay(t,e=0){setTimeout(()=>this.drawPick(t),e)}drawPick({y:t,x:e,year:s}){i({draw:s=>this.shapeDrawer.drawDot(e,t,20*s,a.pick),duration:800,timing:h,onDone:()=>this.drawYear(e,t,s)})}drawYear(t,e,s){i({timing:c,duration:100,draw:i=>this.shapeDrawer.drawText(t-35,e+50,`${s}`,`${30*i}px Arial`,a.text,a.white)})}computeCords(t){const e=this.pathCords[(t+1)*this.dotsSkipped];return e.year=this.years[t],e}}const l=1;class u{constructor(t,e,s,i){this.shaper=t,this.pathCords=e,this.pickCords=s,this.canvas=i,this.image=new Image,this.width=120,this.height=60,this.xOffset=.8*this.width,this.yOffset=this.height+30,this.rotate=0,this.currDotCord=this.pickCords[0],this.rotate=this.computeAngle(this.currDotCord,this.pathCords[40]),console.log("rotate: ",this.rotate),document.all.next.addEventListener("click",()=>{this.nextCord()}),document.all.prev.addEventListener("click",()=>{this.prevCord()}),window.addEventListener("keydown",t=>37===t.keyCode?this.prevCord():39===t.keyCode?this.nextCord():void 0)}get cords(){const t=this.currDotCord;return{y:t.y-this.yOffset,x:t.x-this.xOffset}}downloadImage(){return new Promise(t=>{this.image.onload=(()=>{t(this),this.image.onload=null}),this.image.src="./ship.png"})}appearance(){this.move()}nextCord(){this.clean();const t=this.pathCords.findIndex(t=>t===this.currDotCord);console.log(t);const e=this.pathCords[t+1];this.rotate=this.computeAngle(this.currDotCord,e),this.currDotCord=e,this.move()}prevCord(){this.clean();const t=this.pathCords.findIndex(t=>t===this.currDotCord);console.log(t);const e=this.pathCords[t-1];this.rotate=this.computeAngle(this.currDotCord,e),this.currDotCord=e,this.move()}computeAngle(t,e){const s=Math.abs(t.x-e.x),i=Math.abs(t.y-e.y),r=t.y-e.y>0?1:-1;r<0&&console.log("CHECK!",...arguments);const a=i/Math.sqrt(Math.pow(s,2)+Math.pow(i,2)),o=Math.asin(a)*r;console.log(`rads ${o}`);const h=-o/n.radienMulti;return console.log("rotate",h),-Math.ceil(o/n.radienMulti)}move(){this.shaper.drawDot(this.currDotCord.x,this.currDotCord.y,4,a.red),this.shaper.drawImage(this.cords.x,this.cords.y,this.image,this.width,this.height,null,this.rotate)}clean(){console.log(this.rotate),this.shaper.drawRect(this.cords.x-l,this.cords.y-l,this.width+2*l,this.height+2*l,a.white,this.rotate)}}const p=[2003,2004,2005,2006,2007,2008,2009,2010],f=new class{constructor(t){this.canvasElem=t,this.canvasElem.height=900,this.canvasElem.width=2500,this.ctx=this.canvasElem.getContext("2d"),this.ctx.mozImageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.msImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1}get height(){return this.canvasElem.height}get width(){return this.canvasElem.width}}(document.all.canvas),w=new n(f);new class{constructor(t,e){this.canvas=t,this.shapeDrawer=e,this.xRatio=0,this.yRatio=1,this.sinRatio=70,this.yRatioMultiplier=4.2,this.xRatioMultiplier=142,this.xOffset=-120,this.lineCords=[]}drawPath(){return new Promise(t=>{const e={done:!1};!function t(e){requestAnimationFrame(()=>{e.draw(),e.until.done||t(e)})}({draw:()=>{const s=this.computeNextCords();this.lineCords.push(s);const{x:i,y:r}=s;this.drawDot(i,r),e.done=i>=this.canvas.width,e.done&&t(this)},until:e})})}drawDot(t,e){this.shapeDrawer.drawDot(t,e,2),this.xRatio+=.1}computeNextCords(){return{y:this.canvas.height+this.sinRatio*Math.sin(this.xRatio)+--this.yRatio*this.yRatioMultiplier,x:this.xRatio*this.xRatioMultiplier+this.xOffset}}}(f,w).drawPath().then(({lineCords:t})=>{const e=new d(w,t.slice(20,t.length-10),p).drawPicks();return new u(w,t,e,f).downloadImage()}).then(t=>{setTimeout(()=>{t.appearance()},700)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,