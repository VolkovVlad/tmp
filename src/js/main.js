!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
Object.setPrototypeOf||Array;Object.assign;const s={dpiMultiplier:2};class r{constructor(t){this.el=t,this.el.height=450*s.dpiMultiplier,this.el.width=1250*s.dpiMultiplier,this.ctx=this.el.getContext("2d"),this.ctx.imageSmoothingEnabled=!1}get width(){return this.el.width}get height(){return this.el.height}}function a({timing:t,draw:e,duration:i,onDone:s}){const r=performance.now();requestAnimationFrame(function a(o){let n=((r>o?r:o)-r)/i;n>1&&(n=1);const h=t(n);if(e(h),n<1)return requestAnimationFrame(a);"function"==typeof s&&s()})}function o({fps:t,draw:e,until:i,onDone:s}){let r=performance.now();const a=1e3/(t||1e3);requestAnimationFrame(function t(o){return r+a>o?requestAnimationFrame(t):(r=o,e(),i.done?void("function"==typeof s&&s()):requestAnimationFrame(t))})}class n{constructor(t,e){this.canvas=t,this.shapeDrawer=e,this.dotRadius=2,this.xRatio=0,this.yRatio=1,this.sinRatio=70,this.yRatioMultiplier=4.2,this.xRatioMultiplier=142,this.xOffset=-120,this.until={done:!1},this.lineCords=[]}get centerOfNewDot(){return{y:this.canvas.height+this.sinRatio*Math.sin(this.xRatio)+--this.yRatio*this.yRatioMultiplier,x:this.xRatio*this.xRatioMultiplier+this.xOffset}}resolve(){return new Promise(t=>{o({until:this.until,draw:()=>this.drawPath(t)})})}destroy(){this.until.done=!0}drawPath(t){const e=this.centerOfNewDot;this.drawDot(e),this.lineCords.push(e),this.until.done=e.x>=this.canvas.width,this.until.done&&t(this)}drawDot(t){this.shapeDrawer.drawDot(t.x,t.y,this.dotRadius),this.xRatio+=.1}}function h(t,e){return t/100*e}var c,d;!function(t){t.dot="#82d5ee",t.peak="#4eaaee",t.text="#333",t.white="#fff",t.red="#f00"}(c||(c={}));class l{constructor(t){this.ctx=t}drawDot(t,e,i,s=c.dot){this.ctx.beginPath(),this.ctx.arc(t,e,i,0,l.fullAngle),this.ctx.fillStyle=s,this.ctx.fill()}drawText(t,e,i,s="30px Arial",r=c.text,a=c.white){if(null!==a){const r=this.ctx.measureText(i).width,o=parseInt(s,10),n=Math.floor(h(o,20)),c=r+2*n,d=o+2*n,l=t-n,u=e-n;this.drawRect(l,u,c,d,a)}this.ctx.font=s,this.ctx.textBaseline="top",this.ctx.fillStyle=r,this.ctx.fillText(i,t,e)}drawRect(t,e,i,s,r=c.dot,a){this.ctx.beginPath(),this.saveRestoreCtx(()=>{this.rotate(a,{x:t+h(i,50),y:e+h(s,50)}),this.ctx.rect(t,e,i,s),this.ctx.fillStyle=r,this.ctx.fill()})}drawImage(t,e,i,s,r,a=c.white,o){this.ctx.beginPath(),this.saveRestoreCtx(()=>{this.rotate(o,{x:t+h(s,50),y:e+h(r,50)}),null!==a&&this.drawRect(t,e,s,r,a),this.ctx.drawImage(i,t,e,s,r)})}saveRestoreCtx(t){this.ctx.save(),t(),this.ctx.restore()}rotate(t,e){if(t&&0!==t){const{x:i,y:s}=e;this.ctx.translate(i,s);const r=t*l.radianMulti;this.ctx.rotate(r),this.ctx.translate(-i,-s)}}}l.fullAngle=2*Math.PI,l.radianMulti=Math.PI/180,function(t){t.linear=(t=>t),t.easeInQuad=(t=>t*t),t.easeOutQuad=(t=>t*(2-t)),t.easeInOutQuad=(t=>t<.5?2*t*t:(4-2*t)*t-1),t.easeInCubic=(t=>t*t*t),t.easeOutCubic=(t=>--t*t*t+1),t.easeInOutCubic=(t=>t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1),t.easeInQuart=(t=>t*t*t*t),t.easeOutQuart=(t=>1- --t*t*t*t),t.easeInOutQuart=(t=>t<.5?8*t*t*t*t:1-8*--t*t*t*t),t.easeInQuint=(t=>t*t*t*t*t),t.easeOutQuint=(t=>1+--t*t*t*t*t),t.easeInOutQuint=(t=>t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t)}(d||(d={}));class u{constructor(t,e){this.canvasEl=t,this.evt=e,this.handlers=[],this.callback=(t=>{const{left:e,top:i}=this.canvasEl.getBoundingClientRect(),s=t.clientX-e,r=t.clientY-i;for(let e=0;e<this.handlers.length;e++){const{area:i,handler:a}=this.handlers[e],o=this.checkAreaHovered(i,s,r);o&&(this.isAnyHovered=!0),a(o,t)}this.isAnyHovered?(this.canvasEl.style.cursor="pointer",this.isAnyHovered=!1):this.canvasEl.style.cursor="default"}),this.canvasEl.addEventListener(e,this.callback)}addHandler(t){this.handlers=[...this.handlers,...t]}removeHandler(t){this.handlers=this.handlers.filter(e=>e===t)}removeAllHandlers(){this.handlers=[]}destroy(){this.removeAllHandlers(),this.canvasEl.removeEventListener(this.evt,this.callback)}checkAreaHovered(t,e,i){return t.x0<=e&&t.x1>=e&&t.y0<=i&&t.y1>=i}}u.padding=20;class p extends u{constructor(t){super(t,"mousemove")}}var v=d.linear,f=d.easeInOutQuint,m=d.easeInCubic;class w{constructor(t,e,i=[(new Date).getFullYear()],s,r){this.shaper=t,this.pathCords=e,this.labels=i,this.hoverService=s,this.clickService=r,this.peakRadius=20,this.delayRatio=150,this.peakCords=[],this.clickHandlers=[],this.hoverHandlers=[]}get partsAmount(){return this.labels.length<2?2:this.labels.length}get dotsSkipped(){return Math.floor(this.pathCords.length/this.partsAmount)}resolve(){return new Promise(t=>{for(let t=0;t<this.labels.length;t++){const e=this.computeCords(t);this.peakCords.push(e),this.drawPeakWithDelay(e,t,this.delayRatio*t)}setTimeout(()=>t(this),this.delayRatio*this.labels.length)})}setActive(t){this.peakCords.forEach(t=>{this.shaper.drawDot(t.x,t.y,this.peakRadius,c.peak)});const e=this.peakCords[t];if(!e)return console.warn("not exist");this.active=e,this.shaper.drawDot(e.x,e.y,this.peakRadius,c.red)}onClick(t){this.clickHandlers.push(t)}destroy(){this.hoverHandlers.forEach(t=>this.hoverService.removeHandler(t)),this.clickHandlers.forEach(t=>this.clickService.removeHandler(t)),this.hoverHandlers=[],this.clickHandlers=[]}drawPeakWithDelay(t,e,i=0){setTimeout(()=>this.drawPeak(t,e),i)}drawPeak(t,e){a({draw:e=>this.shaper.drawDot(t.x,t.y,this.peakRadius*e,c.peak),duration:600,timing:f,onDone:()=>{this.drawLabel(t),this.addHover(t),this.addClick(t,e)}})}addHover(t){const{x:e,y:i}=t,s=s=>t===this.active?this.shaper.drawDot(e,i,this.peakRadius,c.red):s?a({draw:t=>this.shaper.drawDot(e,i,t*this.peakRadius,c.dot),duration:300,timing:m}):void a({draw:t=>this.shaper.drawDot(e,i,t*this.peakRadius,c.peak),duration:300,timing:m});this.hoverHandlers.push(s),this.hoverService.addHandler([{area:this.computeClickArea(t),handler:s}])}addClick(t,e){this.clickService.addHandler([{area:this.computeClickArea(t),handler:i=>{i&&this.clickHandlers.forEach(i=>i(e,t.label))}}])}computeClickArea({x:t,y:e}){return{x0:(t-this.peakRadius-p.padding)/s.dpiMultiplier,x1:(t+this.peakRadius+p.padding)/s.dpiMultiplier,y0:(e-this.peakRadius-p.padding)/s.dpiMultiplier,y1:(e+this.peakRadius+p.padding)/s.dpiMultiplier}}drawLabel({x:t,y:e,label:i}){a({timing:v,duration:100,draw:s=>this.shaper.drawText(t-35,e+50,`${i}`,`${30*s}px Arial`,c.text,c.white)})}computeCords(t){const e=this.pathCords[(t+1)*this.dotsSkipped];return e.label=this.labels[t],e}}class x{constructor(t,e=0){this.pathCords=t,this.rotate=0,this.currDotCord=this.pathCords[e],this.rotate=this.computeAngle(this.currDotCord,this.pathCords[e+1])}computeNextCord(){const t=this.pathCords.findIndex(t=>t===this.currDotCord),e=this.pathCords[t+1];this.setCord(e)}computePrevCord(){const t=this.pathCords.findIndex(t=>t===this.currDotCord),e=this.pathCords[t-1];this.setCord(e)}setCord(t){if(!t)return console.warn("end of the part");this.rotate=this.computeAngle(this.currDotCord,t),this.currDotCord=t}computeAngle(t,e){const{cathetY:i,cathetX:s,rotateDirection:r}=this.computeTrangleAndDirection(t,e),a=i/Math.sqrt(Math.pow(s,2)+Math.pow(i,2)),o=Math.asin(a)*r;return-Math.ceil(o/l.radianMulti)}computeTrangleAndDirection(t,e){const i=t.x-e.x,s=t.y-e.y;return{cathetX:Math.abs(i),cathetY:Math.abs(s),rotateDirection:i<0&&s>0||i>0&&s<0?1:-1}}}const y=1,k=33;class g{constructor(t,e,i){this.shaper=t,this.pathCords=e,this.peakCords=i,this.startDot=20,this.currentPeak=-1,this.image=new Image,this.width=120,this.height=60,this.xOffset=h(this.width,80),this.yOffset=this.height+30,this.motion=new x(this.pathCords,this.startDot),document.all.next.addEventListener("click",()=>{this.moveToPeak(this.currentPeak+1)}),document.all.prev.addEventListener("click",()=>{this.moveToPeak(this.currentPeak-1)}),window.addEventListener("keydown",t=>{t.keyCode,t.keyCode})}get cords(){const t=this.motion.currDotCord;return{y:t.y-this.yOffset-(this.motion.rotate+k)/3,x:t.x-this.xOffset+this.motion.rotate/2+k}}downloadImage(t="./ship.png"){return function(t,e){return new Promise(i=>{t.onload=(()=>{i(),t.onload=null}),t.src=e})}(this.image,t).then(()=>this)}appearance(){return new Promise(t=>this.moveToPeak(0,t))}moveToPeak(t,e){const i=this.peakCords[t];if(!i)return console.warn(`no pick with index {${t}}`);const s=this.currentPeak<t,r={done:!1};o({until:r,fps:50,draw:()=>{if(r.done=this.motion.currDotCord===i,!r.done){if(s)return this.moveNextCord();this.movePrevCord()}},onDone:()=>{this.currentPeak=t,"function"==typeof e&&e(this.currentPeak)}})}moveNextCord(){this.clean(),this.motion.computeNextCord(),this.move()}movePrevCord(){this.clean(),this.motion.computePrevCord(),this.move()}move(){this.shaper.drawImage(this.cords.x,this.cords.y,this.image,this.width,this.height,null,this.motion.rotate)}clean(){this.shaper.drawRect(this.cords.x-y,this.cords.y-y,this.width+2*y,this.height+2*y,c.white,this.motion.rotate)}}class C extends u{constructor(t){super(t,"click")}}new class{constructor({canvasEl:t,years:e,imageUrl:i}){this.years=[],this.imageUrl=i,this.years=e,this.canvas=new r(t),this.hover=new p(t),this.click=new C(t),this.shaper=new l(this.canvas.ctx)}run(){return t=this,e=void 0,s=function*(){this.path=yield new n(this.canvas,this.shaper).resolve(),this.peaks=yield new w(this.shaper,this.shotPathToCenter(this.path.lineCords),this.years,this.hover,this.click).resolve(),this.ship=new g(this.shaper,this.path.lineCords,this.peaks.peakCords);try{yield this.ship.downloadImage(this.imageUrl)}catch(t){console.warn("Image for ship wasn't downloaded! Check url correction!")}return yield this.ship.appearance(),this.peaks.setActive(0),this},new((i=void 0)||(i=Promise))(function(r,a){function o(t){try{h(s.next(t))}catch(t){a(t)}}function n(t){try{h(s.throw(t))}catch(t){a(t)}}function h(t){t.done?r(t.value):new i(function(e){e(t.value)}).then(o,n)}h((s=s.apply(t,e||[])).next())});var t,e,i,s}setActive(t){this.peaks.setActive(t),this.ship.moveToPeak(t,()=>{console.log("activated!")})}onPeakClick(t){this.peaks.onClick(t)}shotPathToCenter(t){return t.slice(20,t.length-10)}destroy(){this.hover.destroy(),this.click.destroy()}}({years:[2003,2004,2005,2006,2007,2008,2009,2010],canvasEl:document.all.canvas,imageUrl:"./ship.png"}).run().then(t=>{t.onPeakClick((e,i)=>{t.setActive(e),console.log("chosen year:",i)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,