!function(t){var e={};function i(a){if(e[a])return e[a].exports;var n=e[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,a){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(a,n,function(e){return t[e]}.bind(null,n));return a},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);function a({timing:t,draw:e,duration:i,onDone:a}){const n=performance.now();requestAnimationFrame(function r(s){let o=((n>s?n:s)-n)/i;o>1&&(o=1);const h=t(o);if(e(h),o<1)return requestAnimationFrame(r);"function"==typeof a&&a()})}var n,r;!function(t){t.dot="#82d5ee",t.pick="#4eaaee",t.text="#333",t.white="#fff"}(n||(n={}));class s{constructor(t){this.canvas=t}drawDot(t,e,i,a=n.dot){const{ctx:r}=this.canvas;r.beginPath(),r.arc(t,e,i,0,s.fullAngle),r.fillStyle=a,r.fill()}drawText(t,e,i,a="30px Arial",r=n.text,s=n.white){const{ctx:o}=this.canvas,h=o.measureText(i).width,u=parseInt(a,10),c=Math.floor(u/100*20);const l=h+2*c,d=u+2*c,p=t-c,f=e-c;this.drawRect(p,f,l,d,s),o.font=a,o.textBaseline="top",o.fillStyle=r,o.fillText(i,t,e)}drawRect(t,e,i,a,r=n.dot){const{ctx:s}=this.canvas;s.beginPath(),s.rect(t,e,i,a),s.fillStyle=r,s.fill()}drawImage(t,e){}}s.fullAngle=2*Math.PI,function(t){t.linear=(t=>t),t.easeInQuad=(t=>t*t),t.easeOutQuad=(t=>t*(2-t)),t.easeInOutQuad=(t=>t<.5?2*t*t:(4-2*t)*t-1),t.easeInCubic=(t=>t*t*t),t.easeOutCubic=(t=>--t*t*t+1),t.easeInOutCubic=(t=>t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1),t.easeInQuart=(t=>t*t*t*t),t.easeOutQuart=(t=>1- --t*t*t*t),t.easeInOutQuart=(t=>t<.5?8*t*t*t*t:1-8*--t*t*t*t),t.easeInQuint=(t=>t*t*t*t*t),t.easeOutQuint=(t=>1+--t*t*t*t*t),t.easeInOutQuint=(t=>t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t)}(r||(r={}));var o=r.easeInOutQuint,h=r.linear;class u{constructor(t,e,i=[]){this.shapeDrawer=t,this.pathCords=e,this.years=i,this.delayRatio=150,this.pickCords=[]}get partsAmount(){return this.years.length<2?2:this.years.length}get dotsSkipped(){return Math.floor(this.pathCords.length/this.partsAmount)}drawPicks(){for(let t=0;t<this.years.length;t++){const e=this.computeCords(t);this.pickCords.push(e),this.drawPickWithDelay(e,this.delayRatio*t)}return this.pickCords}drawPickWithDelay(t,e=0){setTimeout(()=>this.drawPick(t),e)}drawPick({y:t,x:e,year:i}){a({draw:i=>this.shapeDrawer.drawDot(e,t,20*i,n.pick),duration:800,timing:o,onDone:()=>this.drawYear(e,t,i)})}drawYear(t,e,i){a({timing:h,duration:100,draw:a=>this.shapeDrawer.drawText(t-35,e+50,`${i}`,`${30*a}px Arial`,n.text,n.white)})}computeCords(t){const e=this.pathCords[(t+1)*this.dotsSkipped];return e.year=this.years[t],e}}const c=[2003,2004,2005,2006,2007,2008,2009,2010],l=new class{constructor(t){this.canvasElem=t,this.canvasElem.height=900,this.canvasElem.width=2500,this.ctx=this.canvasElem.getContext("2d"),this.ctx.mozImageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.msImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1}get height(){return this.canvasElem.height}get width(){return this.canvasElem.width}}(document.all.canvas),d=new s(l);new class{constructor(t,e){this.canvas=t,this.shapeDrawer=e,this.xRatio=0,this.yRatio=1,this.sinRatio=42,this.yRatioMultiplier=4.2,this.xRatioMultiplier=142,this.lineCords=[]}drawPath(){return new Promise(t=>{const e={done:!1};!function t(e){requestAnimationFrame(()=>{e.draw(),e.until.done||t(e)})}({draw:()=>{const i=this.computeNextCords();this.lineCords.push(i);const{x:a,y:n}=i;this.drawDot(a,n),e.done=a>=this.canvas.width,e.done&&t(this)},until:e})})}drawDot(t,e){this.shapeDrawer.drawDot(t,e,2),this.xRatio+=.1}computeNextCords(){return{y:this.canvas.height+this.sinRatio*Math.sin(this.xRatio)+--this.yRatio*this.yRatioMultiplier,x:this.xRatio*this.xRatioMultiplier}}}(l,d).drawPath().then(({lineCords:t})=>{console.log(new u(d,t.slice(20,t.length-10),c).drawPicks())})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,